# Make sure ocamlbuild can find opam-managed packages: first run
#
# eval `opam config env`

# Easiest way to build: using ocamlbuild, which in turn uses ocamlfind

jateste.native :
	ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis -cflags -w,+a-4 \
		jateste.native

# "make clean" removes all generated files

.PHONY: clean
clean :
	ocamlbuild -clean
	rm -rf testall.log *.diff jateste scanner.ml parser.ml parser.mli
	rm -rf *.cmx *.cmi *.cmo *.cmx *.o
	@$(MAKE) -C ../test/ clean

.PHONY: all
all: clean jateste.native test

.PHONY: test
test:
	@echo "\033[0;32m========= Running All Tests! ==========\033[0m"
	@$(MAKE) -C ../test/

.PHONY: install-user
install-user: jateste.native
	@mkdir -p $(HOME)/lib/JaTeste
	@cp -r ../lib $(HOME)/lib/JaTeste
	@echo "Installed JaTeste std lib at $(HOME)/lib/JaTeste..."
	@echo "Use the JATESTE_LIB env-var to specify this install location"

.PHONY: install
install: jateste.native
	@mkdir -p /usr/local/lib/JaTeste
	@cp -r ../lib /usr/local/lib/JaTeste
	@echo "Installed JaTeste std lib at /usr/local/lib/JaTeste..."
	@echo "Use the JATESTE_LIB env-var to specify a different std lib location"


# More detailed: build using ocamlc/ocamlopt + ocamlfind to locate LLVM

OBJS = sast.cmx ast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx jateste.cmx exceptions.cmx
jateste : $(OBJS)
	ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o jateste

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

%.cmx : %.ml
	ocamlfind ocamlopt -c -package llvm $<

### Generated by "ocamldep *.ml *.mli" after building scanner.ml and parser.ml
ast.cmo :
ast.cmx :

sast.cmo :
sast.cmx :

codegen.cmo : ast.cmo sast.cmo
codegen.cmx : ast.cmx ast.cmx
jateste.cmo : semant.cmo scanner.cmo parser.cmi codegen.cmo ast.cmo sast.cmo
jateste.cmx : semant.cmx scanner.cmx parser.cmx codegen.cmx ast.cmx sast.cmx
parser.cmo : ast.cmo sast.cmo parser.cmi
parser.cmx : ast.cmx sast.cmx parser.cmi
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
semant.cmo : ast.cmo sast.cmo
semant.cmx : ast.cmx sast.cmx
parser.cmi : ast.cmo

# Building the tarball

#TESTS = arith1 arith2 arith3 fib for1 for2 func1 func2 func3 func4	\
    func5 gcd2 gcd global1 global2 hello if1 if2 if3 if4 ops1 ops2	\
    var1 while1 local1

#FAILS = assign1 assign2 assign3 dead1 dead2 expr1 expr2 for1 for2	\
    for3 for4 for5 func1 func2 func3 func4 func5 func6 func7 func8	\
    func9 global1 global2 if1 if2 if3 nomain return1 return2 while1	\
    while2

#TESTFILES = $(TESTS:%=test-%.mc) $(TESTS:%=test-%.out) \
	    $(FAILS:%=fail-%.mc) $(FAILS:%=fail-%.err)

#TARFILES = ast.ml codegen.ml Makefile jateste.ml parser.mly README scanner.mll \
	semant.ml testall.sh $(TESTFILES:%=tests/%)

#jateste-llvm.tar.gz : $(TARFILES)
	cd .. && tar czf jateste-llvm/jateste-llvm.tar.gz \
		$(TARFILES:%=jateste-llvm/%)
